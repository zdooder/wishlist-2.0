datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String
  isAdmin       Boolean     @default(false)
  isApproved    Boolean     @default(false)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  wishlists     Wishlist[]
  blockedUsers  UserBlock[] @relation("BlockedBy")
  blockedBy     UserBlock[] @relation("BlockedUsers")
  comments      Comment[]
  reservedItems Item[]      @relation("ReservedItems")
  sessions      Session[]
}

model UserBlock {
  id          String   @id @default(uuid())
  blockerId   String
  blockedId   String
  createdAt   DateTime @default(now())
  blocker     User     @relation("BlockedBy", fields: [blockerId], references: [id])
  blockedUser User     @relation("BlockedUsers", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

model Wishlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  items       Item[]
}

model Item {
  id           String    @id @default(uuid())
  name         String
  description  String?
  price        Float?
  url          String?
  imageData    String?
  isPurchased  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  wishlistId   String
  wishlist     Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  comments     Comment[]
  reservedById String?
  reservedBy   User?     @relation("ReservedItems", fields: [reservedById], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
